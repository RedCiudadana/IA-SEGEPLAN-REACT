import React, { useState, useEffect } from 'react';
import OpenAI from 'openai';
import ReactMarkdown from 'react-markdown';
import { ClipLoader } from 'react-spinners';

// ***** Importar la versi√≥n legacy *****
import * as pdfjsLib from 'pdfjs-dist/legacy/build/pdf';

// ***** Asignar la ruta del worker (en carpeta public) *****
pdfjsLib.GlobalWorkerOptions.workerSrc = '/pdf.worker.mjs';

function Prototipo4() {
  const [userMessage, setUserMessage] = useState('');
  const [chatHistory, setChatHistory] = useState([]);
  const [loading, setLoading] = useState(false);
  const [isVisible, setIsVisible] = useState(true);

  // Estado para el mensaje de "copiado"
  const [copiedMessage, setCopiedMessage] = useState('');

  // Estado para la posici√≥n del popup de "copiado"
  const [popup, setPopup] = useState({ visible: false, x: 0, y: 0 });

  // NUEVO ESTADO PARA GUARDAR TEXTO DEL PDF (si lo requieres para an√°lisis interno)
  const [pdfContent, setPdfContent] = useState('');

  // NUEVO ESTADO PARA MENSAJE DE SUBIDA EN UNA CARD
  const [uploadMessage, setUploadMessage] = useState('');

  // Efecto para ocultar autom√°ticamente el mensaje de subida despu√©s de 3s
  useEffect(() => {
    if (uploadMessage) {
      const timer = setTimeout(() => {
        setUploadMessage('');
      }, 3000);
      return () => clearTimeout(timer);
    }
  }, [uploadMessage]);

  // Funci√≥n para extraer el t√≠tulo y el prompt de los ejemplos
  const parseMessage = (message) => {
    const lines = message.split('\n');
    const title = lines[0].trim(); // primera l√≠nea como t√≠tulo

    // Buscamos d√≥nde empieza "üìù Prompt:"
    const promptIndex = message.indexOf('üìù Prompt:');
    let prompt = promptIndex >= 0 
      ? message.substring(promptIndex).trim()
      : message.trim();

    return { title, prompt };
  };

  // Cargar historial desde localStorage al inicio
  useEffect(() => {
    const savedHistory = JSON.parse(localStorage.getItem('chatHistory4')) || [];
    setChatHistory(savedHistory);
  }, []);

  // Guardar historial en localStorage cada vez que cambie
  useEffect(() => {
    localStorage.setItem('chatHistory4', JSON.stringify(chatHistory));
  }, [chatHistory]);

  // Manejar la carga del archivo PDF
  const handleFileUpload = async (e) => {
    const file = e.target.files[0];
    if (!file) return;

    // Verificamos que sea PDF
    if (file.type !== 'application/pdf') {
      setUploadMessage('Por favor, selecciona un archivo PDF');
      return;
    }

    try {
      const reader = new FileReader();
      reader.onload = async (event) => {
        const typedArray = new Uint8Array(event.target.result);

        // Cargamos el PDF usando pdfjsLib
        const pdf = await pdfjsLib.getDocument(typedArray).promise;
        let extractedText = '';

        // Extraer texto p√°gina por p√°gina
        for (let i = 1; i <= pdf.numPages; i++) {
          const page = await pdf.getPage(i);
          const textContent = await page.getTextContent();
          const pageText = textContent.items.map((item) => item.str).join(' ');
          extractedText += pageText + '\n';
        }

        // Guardamos el contenido en un estado (para uso interno o como contexto)
        setPdfContent(extractedText);

        setUploadMessage('Contenido del PDF cargado correctamente y listo para usarse.');
      };
      reader.readAsArrayBuffer(file);
    } catch (error) {
      console.error('Error al procesar el PDF:', error);
      setUploadMessage('Hubo un error al procesar el PDF.');
    }
  };

  const handleSubmit = async (e) => {
    e.preventDefault();
    // Si no hay mensaje del usuario y no hay PDF, no hacemos nada
    if (!userMessage.trim() && !pdfContent.trim()) return;

    setLoading(true);
    const openai = new OpenAI({
      apiKey: import.meta.env.VITE_OPENAI_API_KEY,
      dangerouslyAllowBrowser: true,
    });

    // Preparar los mensajes para el chat
    const messages = [
      {
        role: 'system',
        content:
          'Eres un asistente especializado en redactar documentos formales. Por favor, devuelve todas tus respuestas en formato Markdown.'
      }
    ];

    // Agregar contenido del PDF como contexto en un mensaje del tipo "system"
    // para que el modelo tenga acceso a esta informaci√≥n,
    // sin incluirlo en el mensaje del usuario.
    if (pdfContent.trim()) {
      messages.push({
        role: 'system',
        content: `Informaci√≥n proveniente del PDF:\n${pdfContent}`
      });
    }

    // Agregamos las √∫ltimas 4 interacciones del historial
    messages.push(
      ...chatHistory.slice(-4).map((msg) => ({ role: 'user', content: msg.user }))
    );

    // Ahora, el texto que se env√≠a como "user" NO incluye el PDF completo,
    // solo una indicaci√≥n de que se adjunt√≥ (en caso de existir).
    const finalUserMessage = pdfContent.trim()
      ? `Se adjunt√≥ un PDF. Pregunta/Comentario:\n${userMessage}`
      : userMessage;

    // Agregamos el mensaje del usuario
    messages.push({ role: 'user', content: finalUserMessage });

    try {
      const completion = await openai.chat.completions.create({
        model: 'gpt-4o-mini',
        messages: messages,
      });

      const responseContent = completion.choices[0]?.message?.content || '';

      // Actualizamos el historial
      const newHistory = [
        ...chatHistory,
        { user: finalUserMessage, bot: responseContent },
      ];
      // Mantener solo las √∫ltimas 5 conversaciones
      setChatHistory(newHistory.slice(-5));
      setUserMessage('');

      // ***** OJO: Aqu√≠ "borramos" el contenido del PDF *****
      setPdfContent('');

      // Si quieres limpiar el PDF despu√©s de cada env√≠o, descomenta:
      // setPdfContent('');
    } catch (error) {
      console.error('Error al llamar a OpenAI:', error);
    } finally {
      setLoading(false);
    }
  };

  // Cierra el banner superior
  const handleClose = () => {
    setIsVisible(false);
  };

  // Copia el contenido al portapapeles y muestra un mensaje tipo "toast"
  const copyToClipboard = (text, event) => {
    navigator.clipboard.writeText(text)
      .then(() => {
        const { clientX, clientY } = event;
        setPopup({ visible: true, x: clientX, y: clientY - 30 });
        setTimeout(() => setPopup({ visible: false, x: 0, y: 0 }), 2000);
      })
      .catch((err) => {
        console.error('Error al copiar:', err);
      });
  };

  const historyData = [
    {
      date: 'Plantillas para escribir oficios',
      messages: [
        ` Ejemplo de Prompt Estructurado
&quot;Analiza este expediente de inversi√≥n en infraestructura y extrae los aspectos clave: objetivos,
presupuesto, riesgos y alineaci√≥n con el Plan Nacional de Desarrollo. Genera recomendaciones
estrat√©gicas para su aprobaci√≥n.&quot;

 Estructura del Informe
Secci√≥n Descripci√≥n
Resumen Ejecutivo Descripci√≥n del expediente, objetivos y criterios evaluados.
Viabilidad del Proyecto Cumplimiento de normativas y requisitos.
An√°lisis Financiero Evaluaci√≥n del presupuesto y fuentes de financiamiento.
Identificaci√≥n de Riesgos Posibles obst√°culos y medidas de mitigaci√≥n.
Recomendaciones Finales Sugerencias para mejorar el proyecto o pasos siguientes.`,
        `Memorando Interno para Cambio en Procedimientos Administrativos

Contexto: SEGEPLAN implementar√° nuevos procedimientos administrativos internos y necesita informar a su personal.
üìù Prompt:
*"Genera un memorando interno para todos los funcionarios de SEGEPLAN informando sobre el cambio en procedimientos administrativos.
Debe incluir:
1. Encabezado oficial con fecha, destinatario y asunto.
2. Introducci√≥n breve explicando la raz√≥n del cambio.
3. Descripci√≥n de los nuevos procedimientos, detallando qu√© cambia, desde cu√°ndo aplica y qu√© se espera del personal.
4. Indicaciones adicionales, como d√≥nde encontrar m√°s informaci√≥n o a qui√©n dirigirse para dudas.
5. Cierre con un tono profesional y llamado a la acci√≥n para asegurar que todos los funcionarios cumplan con las nuevas directrices."*,`,
        `Informe Ejecutivo sobre Avances de un Proyecto

Contexto: SEGEPLAN debe presentar un informe de avances sobre un proyecto de planificaci√≥n urbana financiado por cooperaci√≥n internacional.
üìù Prompt:
*"Escribe un informe ejecutivo sobre los avances del proyecto de planificaci√≥n urbana que SEGEPLAN est√° ejecutando con financiamiento de cooperaci√≥n internacional.
El informe debe incluir:
1. Resumen ejecutivo (1 p√°rrafo) con los avances generales del proyecto.
2. Objetivos del proyecto y su estado actual.
3. Logros alcanzados hasta la fecha, incluyendo cifras y datos relevantes.
4. Desaf√≠os y riesgos identificados, junto con estrategias para mitigarlos.
5. Pr√≥ximos pasos y acciones previstas para los pr√≥ximos tres meses. 
Debe mantener un tono t√©cnico, claro y enfocado en resultados medibles."*,`,
        `Solicitud de Presupuesto para un Evento de SEGEPLAN

Contexto: SEGEPLAN necesita solicitar presupuesto para un evento sobre transformaci√≥n digital en la administraci√≥n p√∫blica.
üìù Prompt:
*"Redacta una solicitud de presupuesto dirigida al departamento financiero de SEGEPLAN para la organizaci√≥n del evento ‚ÄúTransformaci√≥n Digital en la Administraci√≥n P√∫blica‚Äù.
Debe incluir:
1. Introducci√≥n explicando la relevancia del evento para la modernizaci√≥n institucional.
2. Detalle de los gastos estimados, incluyendo alquiler de espacio, materiales, honorarios de expertos, entre otros.
3. Justificaci√≥n del presupuesto, resaltando el impacto y beneficios esperados.
4. Solicitud de aprobaci√≥n y pasos siguientes en el proceso administrativo. 
Debe mantener un tono formal y estructurado, con cifras estimadas y referencias a lineamientos institucionales."*,`,
        `Respuesta Oficial a una Consulta Ciudadana sobre Planificaci√≥n Territorial

Contexto: Un ciudadano ha solicitado informaci√≥n sobre los proyectos de planificaci√≥n territorial en su municipio. SEGEPLAN debe responder formalmente.
üìù Prompt:
*"Escribe una respuesta oficial a una consulta ciudadana recibida en SEGEPLAN sobre proyectos de planificaci√≥n territorial en un municipio espec√≠fico.
Debe incluir:
1. Saludo formal y agradecimiento por la consulta.
2. Explicaci√≥n del marco general de planificaci√≥n territorial y el rol de SEGEPLAN en este proceso.
3. Informaci√≥n sobre proyectos activos en el municipio, mencionando objetivos, estado de avance y fuentes de financiamiento.
4. Referencias a documentos oficiales o enlaces donde el ciudadano pueda obtener m√°s informaci√≥n.
5. Cierre cordial, ofreciendo contacto adicional para resolver m√°s dudas. 
Debe mantener un tono accesible pero formal, asegurando que la informaci√≥n sea clara y comprensible para el ciudadano."*`
      ]
    }
  ];

  return (
    <>
      {/* Si hay algo en copiedMessage, muestra un "toast" o aviso */}
      {copiedMessage && (
        <div className="toast-notification">
          {copiedMessage}
        </div>
      )}

      <div className="main-center-content-m-left-2 center-content search-sticky">
        {isVisible && (
          <div className="banner-badge bg_image mb-4 relative">
            <button 
              onClick={handleClose} 
              className="absolute top-2 right-2 bg-red-500 text-white rounded-full p-1 hover:bg-red-700"
              aria-label="Close Banner"
            >
              ‚úï
            </button>
            <p className="dsic my-4">
          üåü <b>¬°Bienvenido al m√≥dulo de Ciencia de Datos!</b> üåü
              <br/>
              Este asistente usa t√©cnicas de <b>ciencia de datos</b> para analizar tendencias en inversi√≥n, desarrollo y planificaci√≥n estrat√©gica.
              <br/><br/>
              üìå <b>¬øC√≥mo funciona?</b>
              <br/>  1Ô∏è‚É£ Carga bases de datos en formato Excel o CSV.
              <br/>  2Ô∏è‚É£ Especifica qu√© patrones o correlaciones deseas analizar.
              <br/>  3Ô∏è‚É£ El asistente genera gr√°ficos interactivos y modelos predictivos.
              <br/>  4Ô∏è‚É£ Proporciona informes con visualizaciones y tendencias clave.
              <br/>  5Ô∏è‚É£ Descarga los resultados para reportes estrat√©gicos.
              <br/>
              <br/>
              üì¢ <b>Recuerda:</b> La IA es una herramienta de apoyo. Siempre revisa los resultados y haz los ajustes necesarios antes de su uso oficial.
              <br/>‚ö† <b>Supervisi√≥n humana recomendada</b> antes de su publicaci√≥n. üëÄ
            </p>
          </div>
        )}

        <div className="question_answer__wrapper__chatbot">
          {chatHistory.map((entry, index) => (
            <div key={index} className="single__question__answer">
              <div className="question_user">
                <div className="left_user_info">
                  <img style={{ width: '50px' }} src="/redciudadana.png" alt="avatar" />
                  <div className="question__user">{entry.user}</div>
                </div>
                <div className="edit__icon openuptip" tooltip="Edit It">
                  <i className="fs-20 fa-regular fa-pen-to-square" />
                </div>
              </div>

              <div className="answer__area">
                <div className="thumbnail">
                  <img src="assets/images/avatar/04.png" alt="avatar" />
                </div>
                <div className="answer_main__wrapper">
                  <h4 className="common__title">Respuesta</h4>
                  <div className="disc" style={{ fontSize: '1rem', lineHeight: '1.5' }}>
                    <ReactMarkdown>{entry.bot}</ReactMarkdown>
                  </div>
                </div>
              </div>
            </div>
          ))}

          {loading && (
            <div
              className="loading-indicator"
              style={{
                display: 'flex',
                justifyContent: 'center',
                alignItems: 'center',
                height: '100%',
              }}
            >
              <ClipLoader color="#497696" loading={loading} size={50} />
            </div>
          )}

          {/* FORMULARIO DE ENV√çO */}
          <form onSubmit={handleSubmit} className="search-form">
            {/* Bot√≥n para cargar PDF */}
            <input 
              type="file" 
              accept="application/pdf"
              onChange={handleFileUpload} 
              style={{ marginBottom: '1rem' }}
            />

            {/* Mostrar el mensaje de subida dentro de una card amigable */}
            {uploadMessage && (
              <div
                style={{
                  position: 'absolute',
                  background: '#f8f9fa', // Gris claro
                  border: '1px solid #dee2e6', 
                  borderRadius: '8px',
                  padding: '1rem',
                  boxShadow: '0 2px 6px rgba(0, 0, 0, 0.15)',
                  zIndex: 9999,
                }}
              >
                <strong>{uploadMessage}</strong>
              </div>
            )}

            <textarea
              placeholder="Escribe tu pregunta o petici√≥n..."
              value={userMessage}
              onChange={(e) => setUserMessage(e.target.value)}
              onKeyDown={(e) => {
                if (e.key === 'Enter' && !e.shiftKey) {
                  e.preventDefault();
                  handleSubmit(e);
                }
              }}
            />

            <button type="submit" disabled={loading}>
              <i className="fa-solid fa-arrow-up"></i>
            </button>
          </form>

          <div className="copyright-area-bottom">
            <p>
              Un proyecto con la asistencia t√©cnica de la <a href="https://redciudadana.org/">Asociaci√≥n Civil Red Ciudadana</a> - 2025
            </p>
          </div>
        </div>
      </div>

      {/* Popup de "Copiado al portapapeles" */}
      {popup.visible && (
        <div
          className="clipboard-popup"
          style={{
            position: 'absolute',
            top: `${popup.y}px`,
            left: `${popup.x}px`,
            background: 'rgba(0, 0, 0, 0.7)',
            color: '#fff',
            padding: '6px 10px',
            borderRadius: '5px',
            fontSize: '1.3rem',
            pointerEvents: 'none',
            zIndex: 1000,
            transition: 'opacity 0.3s',
            opacity: 1,
          }}
        >
          üìã ¬°Copiado al portapapeles!
        </div>
      )}

      {/* Right side bar */}
      <div className="right-side-bar-new-chat-option">
        <div className="chat-history-wrapper">
          {historyData.map((history, index) => (
            <div className="chat-history-area-start" key={index}>
              <h6 className="title">{history.date}</h6>

              {history.messages.map((message, msgIndex) => {
                const { title, prompt } = parseMessage(message);

                return (
                  <div
                    key={msgIndex}
                    className="single-history"
                    style={{ cursor: 'pointer', position: 'relative' }}
                    onClick={(e) => copyToClipboard(prompt, e)}
                  >
                    <p>{title}</p>
                    <button
                      onClick={(e) => {
                        e.stopPropagation();
                        copyToClipboard(prompt, e);
                      }}
                    >
                      <i className="fa-regular fa-clipboard"></i>
                    </button>
                  </div>
                );
              })}
            </div>
          ))}
        </div>

        <div className="right-side-open-clouse" id="collups-right">
          <img src="assets/images/icons/01.svg" alt="icons" />
        </div>
      </div>
    </>
  );
}

export default Prototipo4;
